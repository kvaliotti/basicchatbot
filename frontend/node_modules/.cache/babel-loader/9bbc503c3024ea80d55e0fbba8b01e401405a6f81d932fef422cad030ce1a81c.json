{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000';\nclass ChatService {\n  constructor() {\n    this.apiClient = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  async sendMessage(request) {\n    try {\n      const response = await this.apiClient.post('/api/chat', request);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n  async getConversations() {\n    try {\n      const response = await this.apiClient.get('/api/conversations');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting conversations:', error);\n      throw error;\n    }\n  }\n  async createConversation() {\n    try {\n      const response = await this.apiClient.post('/api/conversations');\n      return response.data;\n    } catch (error) {\n      console.error('Error creating conversation:', error);\n      throw error;\n    }\n  }\n}\nexport const chatService = new ChatService();","map":{"version":3,"names":["axios","API_BASE_URL","ChatService","constructor","apiClient","create","baseURL","headers","sendMessage","request","response","post","data","error","console","getConversations","get","createConversation","chatService"],"sources":["/Users/konstantinvaliotti/basicchatbot/frontend/src/services/chatService.ts"],"sourcesContent":["import axios from 'axios';\nimport { ChatRequest, ChatResponse, ConversationResponse } from '../types/chat';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nclass ChatService {\n  private apiClient = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  async sendMessage(request: ChatRequest): Promise<ChatResponse> {\n    try {\n      const response = await this.apiClient.post<ChatResponse>('/api/chat', request);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  async getConversations(): Promise<ConversationResponse[]> {\n    try {\n      const response = await this.apiClient.get<ConversationResponse[]>('/api/conversations');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting conversations:', error);\n      throw error;\n    }\n  }\n\n  async createConversation(): Promise<ConversationResponse> {\n    try {\n      const response = await this.apiClient.post<ConversationResponse>('/api/conversations');\n      return response.data;\n    } catch (error) {\n      console.error('Error creating conversation:', error);\n      throw error;\n    }\n  }\n}\n\nexport const chatService = new ChatService(); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,WAAW,CAAC;EAAAC,YAAA;IAAA,KACRC,SAAS,GAAGJ,KAAK,CAACK,MAAM,CAAC;MAC/BC,OAAO,EAAEL,YAAY;MACrBM,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EAAA;EAEF,MAAMC,WAAWA,CAACC,OAAoB,EAAyB;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACN,SAAS,CAACO,IAAI,CAAe,WAAW,EAAEF,OAAO,CAAC;MAC9E,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,gBAAgBA,CAAA,EAAoC;IACxD,IAAI;MACF,MAAML,QAAQ,GAAG,MAAM,IAAI,CAACN,SAAS,CAACY,GAAG,CAAyB,oBAAoB,CAAC;MACvF,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMI,kBAAkBA,CAAA,EAAkC;IACxD,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAM,IAAI,CAACN,SAAS,CAACO,IAAI,CAAuB,oBAAoB,CAAC;MACtF,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMK,WAAW,GAAG,IAAIhB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}