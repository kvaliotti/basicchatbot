{"ast":null,"code":"var _jsxFileName = \"/Users/konstantinvaliotti/basicchatbot/frontend/src/context/ChatContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(undefined);\nexport const useChatContext = () => {\n  _s();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChatContext must be used within a ChatProvider');\n  }\n  return context;\n};\n_s(useChatContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [currentConversationId, setCurrentConversationId] = useState(null);\n  const addMessage = message => {\n    setMessages(prev => [...prev, message]);\n  };\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  // Clear messages when starting a new conversation\n  const handleSetCurrentConversationId = id => {\n    if (id === null) {\n      clearMessages();\n    }\n    setCurrentConversationId(id);\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      messages,\n      addMessage,\n      clearMessages,\n      currentConversationId,\n      setCurrentConversationId: handleSetCurrentConversationId\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatProvider, \"8yZwu7fVnOzN2fT+NoN4HyIEbDU=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ChatContext","undefined","useChatContext","_s","context","Error","ChatProvider","children","_s2","messages","setMessages","currentConversationId","setCurrentConversationId","addMessage","message","prev","clearMessages","handleSetCurrentConversationId","id","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/konstantinvaliotti/basicchatbot/frontend/src/context/ChatContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { Message } from '../types/chat';\n\ninterface ChatContextType {\n  messages: Message[];\n  addMessage: (message: Message) => void;\n  clearMessages: () => void;\n  currentConversationId: number | null;\n  setCurrentConversationId: (id: number | null) => void;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport const useChatContext = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChatContext must be used within a ChatProvider');\n  }\n  return context;\n};\n\ninterface ChatProviderProps {\n  children: ReactNode;\n}\n\nexport const ChatProvider: React.FC<ChatProviderProps> = ({ children }) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [currentConversationId, setCurrentConversationId] = useState<number | null>(null);\n\n  const addMessage = (message: Message) => {\n    setMessages(prev => [...prev, message]);\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  // Clear messages when starting a new conversation\n  const handleSetCurrentConversationId = (id: number | null) => {\n    if (id === null) {\n      clearMessages();\n    }\n    setCurrentConversationId(id);\n  };\n\n  return (\n    <ChatContext.Provider\n      value={{\n        messages,\n        addMessage,\n        clearMessages,\n        currentConversationId,\n        setCurrentConversationId: handleSetCurrentConversationId,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW9E,MAAMC,WAAW,gBAAGL,aAAa,CAA8BM,SAAS,CAAC;AAEzE,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,OAAO,GAAGR,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;EACtE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,cAAc;AAY3B,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACc,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EAEvF,MAAMgB,UAAU,GAAIC,OAAgB,IAAK;IACvCJ,WAAW,CAACK,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,OAAO,CAAC,CAAC;EACzC,CAAC;EAED,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1BN,WAAW,CAAC,EAAE,CAAC;EACjB,CAAC;;EAED;EACA,MAAMO,8BAA8B,GAAIC,EAAiB,IAAK;IAC5D,IAAIA,EAAE,KAAK,IAAI,EAAE;MACfF,aAAa,CAAC,CAAC;IACjB;IACAJ,wBAAwB,CAACM,EAAE,CAAC;EAC9B,CAAC;EAED,oBACEnB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IACnBC,KAAK,EAAE;MACLX,QAAQ;MACRI,UAAU;MACVG,aAAa;MACbL,qBAAqB;MACrBC,wBAAwB,EAAEK;IAC5B,CAAE;IAAAV,QAAA,EAEDA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAChB,GAAA,CAjCWF,YAAyC;AAAAmB,EAAA,GAAzCnB,YAAyC;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}